"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37],{9591:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a ragdoll from a model that satisfies any of its blueprints. Returns nil if no blueprint is satisfied.","params":[{"name":"model","desc":"","lua_type":"Model"},{"name":"blueprintOverride","desc":"","lua_type":"Blueprint?"}],"returns":[{"desc":"","lua_type":"Ragdoll?\\r\\n"}],"function_type":"static","source":{"line":46,"path":"lib/RagdollFactory/init.lua"}},{"name":"wrap","desc":"Creates a Ragdoll from a model that already has its Constraints constructed. Used to replicate a ragdoll across server -> client boundary.","params":[{"name":"ragdollModel","desc":"","lua_type":"Model"},{"name":"blueprintOverride","desc":"","lua_type":"Blueprint?"}],"returns":[{"desc":"","lua_type":"Ragdoll?\\r\\n"}],"function_type":"static","realm":["Client"],"source":{"line":61,"path":"lib/RagdollFactory/init.lua"}},{"name":"addBlueprint","desc":"Adds a blueprint to the factory. Retroactively updates all existing ragdolls to this type of ragdoll if they satisfy its requirements.","params":[{"name":"blueprint","desc":"","lua_type":"Blueprint"}],"returns":[],"function_type":"static","source":{"line":75,"path":"lib/RagdollFactory/init.lua"}}],"properties":[{"name":"RagdollConstructed","desc":"Fires when a ragdoll is constructed by the factory.\\n\\n```lua\\nRagdollFactory.RagdollConstructed:Connect(function(ragdoll: Ragdoll)\\n\\t-- Do ragdoll things...\\nend)\\n```","lua_type":"Signal","readonly":true,"source":{"line":27,"path":"lib/RagdollFactory/init.lua"}}],"types":[],"name":"RagdollFactory","desc":"","source":{"line":11,"path":"lib/RagdollFactory/init.lua"}}')}}]);